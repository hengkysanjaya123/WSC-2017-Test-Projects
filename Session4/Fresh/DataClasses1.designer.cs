#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fresh
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Session4-1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    partial void InsertSurvey(Survey instance);
    partial void UpdateSurvey(Survey instance);
    partial void DeleteSurvey(Survey instance);
    partial void InsertDetailSurvey(DetailSurvey instance);
    partial void UpdateDetailSurvey(DetailSurvey instance);
    partial void DeleteDetailSurvey(DetailSurvey instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Fresh.Properties.Settings.Default.Session4_1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Answer> Answers
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
		
		public System.Data.Linq.Table<Survey> Surveys
		{
			get
			{
				return this.GetTable<Survey>();
			}
		}
		
		public System.Data.Linq.Table<DetailSurvey> DetailSurveys
		{
			get
			{
				return this.GetTable<DetailSurvey>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Answer")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Answer1;
		
		private EntitySet<DetailSurvey> _DetailSurveys;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAnswer1Changing(string value);
    partial void OnAnswer1Changed();
    #endregion
		
		public Answer()
		{
			this._DetailSurveys = new EntitySet<DetailSurvey>(new Action<DetailSurvey>(this.attach_DetailSurveys), new Action<DetailSurvey>(this.detach_DetailSurveys));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Answer", Storage="_Answer1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Answer1
		{
			get
			{
				return this._Answer1;
			}
			set
			{
				if ((this._Answer1 != value))
				{
					this.OnAnswer1Changing(value);
					this.SendPropertyChanging();
					this._Answer1 = value;
					this.SendPropertyChanged("Answer1");
					this.OnAnswer1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Answer_DetailSurvey", Storage="_DetailSurveys", ThisKey="ID", OtherKey="AnswerID")]
		public EntitySet<DetailSurvey> DetailSurveys
		{
			get
			{
				return this._DetailSurveys;
			}
			set
			{
				this._DetailSurveys.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailSurveys(DetailSurvey entity)
		{
			this.SendPropertyChanging();
			entity.Answer = this;
		}
		
		private void detach_DetailSurveys(DetailSurvey entity)
		{
			this.SendPropertyChanging();
			entity.Answer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Survey")]
	public partial class Survey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _SurveyDate;
		
		private string _Departure;
		
		private string _Arrival;
		
		private string _CabinType;
		
		private System.Nullable<int> _Age;
		
		private string _Gender;
		
		private System.Nullable<char> _Subscription;
		
		private EntitySet<DetailSurvey> _DetailSurveys;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSurveyDateChanging(System.DateTime value);
    partial void OnSurveyDateChanged();
    partial void OnDepartureChanging(string value);
    partial void OnDepartureChanged();
    partial void OnArrivalChanging(string value);
    partial void OnArrivalChanged();
    partial void OnCabinTypeChanging(string value);
    partial void OnCabinTypeChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnSubscriptionChanging(System.Nullable<char> value);
    partial void OnSubscriptionChanged();
    #endregion
		
		public Survey()
		{
			this._DetailSurveys = new EntitySet<DetailSurvey>(new Action<DetailSurvey>(this.attach_DetailSurveys), new Action<DetailSurvey>(this.detach_DetailSurveys));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyDate", DbType="Date NOT NULL")]
		public System.DateTime SurveyDate
		{
			get
			{
				return this._SurveyDate;
			}
			set
			{
				if ((this._SurveyDate != value))
				{
					this.OnSurveyDateChanging(value);
					this.SendPropertyChanging();
					this._SurveyDate = value;
					this.SendPropertyChanged("SurveyDate");
					this.OnSurveyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Departure", DbType="VarChar(100)")]
		public string Departure
		{
			get
			{
				return this._Departure;
			}
			set
			{
				if ((this._Departure != value))
				{
					this.OnDepartureChanging(value);
					this.SendPropertyChanging();
					this._Departure = value;
					this.SendPropertyChanged("Departure");
					this.OnDepartureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arrival", DbType="VarChar(100)")]
		public string Arrival
		{
			get
			{
				return this._Arrival;
			}
			set
			{
				if ((this._Arrival != value))
				{
					this.OnArrivalChanging(value);
					this.SendPropertyChanging();
					this._Arrival = value;
					this.SendPropertyChanged("Arrival");
					this.OnArrivalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CabinType", DbType="VarChar(50)")]
		public string CabinType
		{
			get
			{
				return this._CabinType;
			}
			set
			{
				if ((this._CabinType != value))
				{
					this.OnCabinTypeChanging(value);
					this.SendPropertyChanging();
					this._CabinType = value;
					this.SendPropertyChanged("CabinType");
					this.OnCabinTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subscription", DbType="Char(1)")]
		public System.Nullable<char> Subscription
		{
			get
			{
				return this._Subscription;
			}
			set
			{
				if ((this._Subscription != value))
				{
					this.OnSubscriptionChanging(value);
					this.SendPropertyChanging();
					this._Subscription = value;
					this.SendPropertyChanged("Subscription");
					this.OnSubscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Survey_DetailSurvey", Storage="_DetailSurveys", ThisKey="ID", OtherKey="SurveyID")]
		public EntitySet<DetailSurvey> DetailSurveys
		{
			get
			{
				return this._DetailSurveys;
			}
			set
			{
				this._DetailSurveys.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailSurveys(DetailSurvey entity)
		{
			this.SendPropertyChanging();
			entity.Survey = this;
		}
		
		private void detach_DetailSurveys(DetailSurvey entity)
		{
			this.SendPropertyChanging();
			entity.Survey = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailSurvey")]
	public partial class DetailSurvey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SurveyID;
		
		private int _QuestionID;
		
		private System.Nullable<int> _AnswerID;
		
		private EntityRef<Answer> _Answer;
		
		private EntityRef<Survey> _Survey;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSurveyIDChanging(int value);
    partial void OnSurveyIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnAnswerIDChanging(System.Nullable<int> value);
    partial void OnAnswerIDChanged();
    #endregion
		
		public DetailSurvey()
		{
			this._Answer = default(EntityRef<Answer>);
			this._Survey = default(EntityRef<Survey>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyID", DbType="Int NOT NULL")]
		public int SurveyID
		{
			get
			{
				return this._SurveyID;
			}
			set
			{
				if ((this._SurveyID != value))
				{
					if (this._Survey.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurveyIDChanging(value);
					this.SendPropertyChanging();
					this._SurveyID = value;
					this.SendPropertyChanged("SurveyID");
					this.OnSurveyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerID", DbType="Int")]
		public System.Nullable<int> AnswerID
		{
			get
			{
				return this._AnswerID;
			}
			set
			{
				if ((this._AnswerID != value))
				{
					if (this._Answer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._AnswerID = value;
					this.SendPropertyChanged("AnswerID");
					this.OnAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Answer_DetailSurvey", Storage="_Answer", ThisKey="AnswerID", OtherKey="ID", IsForeignKey=true)]
		public Answer Answer
		{
			get
			{
				return this._Answer.Entity;
			}
			set
			{
				Answer previousValue = this._Answer.Entity;
				if (((previousValue != value) 
							|| (this._Answer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Answer.Entity = null;
						previousValue.DetailSurveys.Remove(this);
					}
					this._Answer.Entity = value;
					if ((value != null))
					{
						value.DetailSurveys.Add(this);
						this._AnswerID = value.ID;
					}
					else
					{
						this._AnswerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Answer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Survey_DetailSurvey", Storage="_Survey", ThisKey="SurveyID", OtherKey="ID", IsForeignKey=true)]
		public Survey Survey
		{
			get
			{
				return this._Survey.Entity;
			}
			set
			{
				Survey previousValue = this._Survey.Entity;
				if (((previousValue != value) 
							|| (this._Survey.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Survey.Entity = null;
						previousValue.DetailSurveys.Remove(this);
					}
					this._Survey.Entity = value;
					if ((value != null))
					{
						value.DetailSurveys.Add(this);
						this._SurveyID = value.ID;
					}
					else
					{
						this._SurveyID = default(int);
					}
					this.SendPropertyChanged("Survey");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_DetailSurvey", Storage="_Question", ThisKey="QuestionID", OtherKey="ID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.DetailSurveys.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.DetailSurveys.Add(this);
						this._QuestionID = value.ID;
					}
					else
					{
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Question1;
		
		private EntitySet<DetailSurvey> _DetailSurveys;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuestion1Changing(string value);
    partial void OnQuestion1Changed();
    #endregion
		
		public Question()
		{
			this._DetailSurveys = new EntitySet<DetailSurvey>(new Action<DetailSurvey>(this.attach_DetailSurveys), new Action<DetailSurvey>(this.detach_DetailSurveys));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Question", Storage="_Question1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Question1
		{
			get
			{
				return this._Question1;
			}
			set
			{
				if ((this._Question1 != value))
				{
					this.OnQuestion1Changing(value);
					this.SendPropertyChanging();
					this._Question1 = value;
					this.SendPropertyChanged("Question1");
					this.OnQuestion1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_DetailSurvey", Storage="_DetailSurveys", ThisKey="ID", OtherKey="QuestionID")]
		public EntitySet<DetailSurvey> DetailSurveys
		{
			get
			{
				return this._DetailSurveys;
			}
			set
			{
				this._DetailSurveys.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailSurveys(DetailSurvey entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_DetailSurveys(DetailSurvey entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
}
#pragma warning restore 1591
